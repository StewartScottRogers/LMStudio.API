using System;
using System.Collections.Generic;

namespace LexerLibrary
{
    public class Lexer
    {
        private readonly string input;
        private int position;
        private int startPosition;

        public Lexer(string input)
        {
            this.input = input ?? throw new ArgumentNullException(nameof(input));
        }

        public Token NextToken()
        {
            SkipWhitespace();

            if (IsAtEnd())
                return new Token(TokenType.EndMarker, "", position);

            char currentChar = Peek();
            if (char.IsLetter(currentChar))
                return IdentifierOrKeyword();

            switch (currentChar)
            {
                case '+':
                    return Match('+') ? new Token("PLUS", "+") : new Token("PLUSEQUAL", "+=");
                case '-':
                    return Match('-') ? new Token("MINUS", "-") : new Token("MINEQUAL", "-=");
                // Add more cases for other tokens as needed

### Solution Structure

1. **Solution**: `LexerSolution.sln`
2. **Project**: `LexerLibrary` (Class Library)
3. **Files**:
   - `Lexer.cs`
   - `TokenType.cs` (Enumeration)
   - `LexerResultTuple.cs` (Record)
   - `AbstractSyntaxTreeNode.cs` (Base Class for AST Nodes)
   - `StatementNode.cs`
   - `CompoundStatementNode.cs`
   - `SimpleStatementNode.cs`
   - `AssignmentNode.cs`
   - `ReturnStatementNode.cs`
   - `RaiseStatementNode.cs`
   - `GlobalStatementNode.cs`
   - `NonlocalStatementNode.cs`
   - `DelStatementNode.cs`
   - `YieldStatementNode.cs`
   - `AssertStatementNode.cs`
   - `ImportNameNode.cs`
   - `ImportFromNode.cs`

To create a .NET 9.0 Solution in Visual Studio 2022 that meets the specified requirements, we will follow these steps:

1. **Initialize a new Solution in Visual Studio**.
2. **Create the necessary project structure** with separate files for each class, interface, enumeration, and record.
3. **Develop the lexer and AST nodes** based on the provided grammar.
4. **Implement the AST Pretty Printer.**
5. **Write unit tests using Microsoft's Unit Test Framework.**

### Solution Structure

1. **LexerLibrary**
    - **Classes:**
        - Lexer.cs
        - Token.cs
        - TokenType.cs
        - LexerException.cs
    - **Interfaces:**
        - ILexer.cs
    - **Enumerations:**
        - None for this task.
    - **Records:**
        - TokenTuple.cs

### Solution Steps:

1. **Initialize a new .NET 9.0 Solution in Visual Studio.**
2. **Include comprehensive comments for any non-trivial logic or structure to enhance understanding.**
3. **Define the project structure ensuring each class, interface, enumeration, and record is in its own file.**
4. **Develop unit tests using Microsoft's Unit Test Framework.**
5. **Include a .README or documentation summarizing the project and key points of logic for easy comprehension.**

Let's break down the solution into steps:

1. **Initialize a new Solution in Visual Studio**:
   - Create a new Class Library project targeting .NET 9.0.
   - Name the project `PythonLexer`.

2. **Define the Project Structure**:
   - Create separate files for each class, interface, enumeration, and record.

3. **Implement the Lexer**:
   - Create a class `Lexer` to tokenize the input based on the given grammar.
   - Use streams for all input/output operations.

4. **Generate the Abstract Syntax Tree (AST)**:
   - Create classes for each node in the AST.
   - Implement methods to build the AST from tokens generated by the lexer.

5. **Pretty Printer**:
   - Develop a pretty printer class that can convert an AST back into a human-readable string representation.

6. **Unit Tests**:
   - Write unit tests using Microsoft's Unit Test Framework for various scenarios, including edge cases and boundary conditions.

Given the requirements and the grammar provided, let's start by creating the solution structure in Visual Studio 2022. We will follow the coding style guidelines and ensure the solution is fully compilable and executable without additional coding.

### Step 1: Initialize a New Solution
1. Open Visual Studio 2022.
2. Create a new Class Library project named `LexerLibrary`.
3. Ensure the target framework is .NET 9.0.

### File Structure