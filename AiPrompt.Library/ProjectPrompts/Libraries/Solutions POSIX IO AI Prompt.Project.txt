Create a complete .NET 9.0 Solution in Visual Studio using C#. Ensure the solution is fully compilable and executable without additional coding. Follow these guidelines meticulously:

- **Separate Files**: 
 - Create separate files for each class.
 - Create separate files for each interface.
 - Create separate files for each enumeration.
 - Create separate files for each record.

- **Code Style**:
 - Never use leading underscores for any variable.
 - Use only explicit types.
 - Local variables should use lowerCamelCase.
 - Member variables should use UpperCamelCase.
 - Class properties should use UpperCamelCase.
 - Class names should use UpperCamelCase.
 - Interface names should use UpperCamelCase.
 - Enumeration names should use UpperCamelCase.
 - Record names should use UpperCamelCase.
 - Method names should use UpperCamelCase.
 - All Tuples should be named and Post Fixed with the word Tuple.

- **Library Usage**:
 - Use only the Microsoft Basic Component Library.
 - Use formally defined types.

- **Programming Constructs**:
 - Utilize Fluent Interfaces wherever possible.
 - Implement LINQ where applicable.
 - Prefer 'foreach' statements instead of 'for' loops.
 - Use streams for all input/output operations.
 - Favor use of Tuples for returning multiple values from a method rather than Data Transport Objects, Structs, Or Records

- **Unit Testing**: 
 - Use only the Microsoft Unit Test Framework.
 - Do not use XUnit or NUnit.
 - Include complex data types for inputs in all unit tests.

- **Code Conventions**:
 - Employ Readonly member variables whenever applicable.
 - Never use underscore prefixes for member variables.

- **Naming Conventions**: 
 - Local Variables, Member Variables, Properties, and Methods should be named with complete nouns, appending a prefix or postfix for clarification if required.
 - Classes and interfaces should have names that include a prefix or postfix when necessary for clarification.

- **Documentation**: 
 - Add comments to explain complex code structures or logic in a way accessible to business analysts or entry-level programmers.

# Steps
1. Initialize a new .NET 9.0 project in Visual Studio.
2. Define the project structure ensuring each class, interface, enumeration, and record is in its own file.
3. Write code using the described programming and styling guidelines.
4. Develop unit tests using Microsoft's Unit Test Framework to validate functionality, focusing on complex data input.
5. Include comprehensive comments for any non-trivial logic or structure to enhance understanding.

# Output Format
Deliver the solution as a Visual Studio project directory containing: 
- All necessary code files following the naming and file organization conventions.
- A README or documentation summarizing the project and key points of logic for easy comprehension.

# Notes
- The solution should be self-contained, adhering strictly to the guidelines provided.
- Assume that reasoning and clarity in naming conventions and comments is as important as functional correctness.
- The solution should be fully executable and compilable without any additional coding.

----------------------------------------------------------------------------------------------------------------------------


# Prompt
 
  Create an in-memory library that simulates POSIX I/O file descriptors and their associated system calls. This library should include the following functionalities:

- **File Descriptors**: Implement abstractions for accessing files, devices, and I/O streams using standard file descriptors. The library should handle the standard file descriptors: `0` for `stdin`, `1` for `stdout`, and `2` for `stderr`.

- **System Calls**: Implement essential POSIX system calls such as `open`, `read`, `write`, `close`, and `lseek`. Ensure that these functions can handle operations on in-memory data structures which simulate file behavior.

- **Standard Streams**: Provide functionality equivalent to standard C I/O functions like `fopen`, `fwrite`, and `fprintf`, but re-implemented to operate on your in-memory library instead of actual disk files.

- **Pipes and Redirection**: Implement mechanisms to allow inter-process communication using pipes and the ability to redirect output streams to your in-memory structures.

- **Uniform Treatment of Devices**: Ensure that devices (simulated as files) are treated uniformly so that all I/O operations are seamless and consistent across file types and streams.

Consider edge cases such as error handling for invalid file descriptors, handling of EOF conditions, and synchronization if your library will be used in a multi-threaded context.