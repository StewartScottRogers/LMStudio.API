using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace LexerLibrary
{
    public class Lexer
    {
        private readonly string input;
        private int position;
        private readonly List<Token> tokens = new();
        private const char Eof = '\0';

        public Lexer(string input)
        {
            this.input = input;
            this.position = 0;
            Tokenize();
        }

        public IReadOnlyList<Token> Tokens => tokens;

        private int position;

        private void Tokenize()
        {
            while (position < source.Length)
            {
                char currentChar = source[position];

                if (char.IsWhiteSpace(currentChar))
                {
                    position++;
                    continue;
                }

                if (char.IsLetterOrDigit(currentChar) || currentChar == '_')
                {
                    var token = ReadIdentifier();
                    // Handle the identifier token
                    tokens.Add(token);
                }
                else if (char.IsPunctuation(currentToken.ToString()))
                {
                    var token = ReadPunctuator();
                    // Handle the punctuator token
                    tokens.Add(token);
                }
                else
                {
                    throw new Exception("Unexpected character: " + currentToken.ToString());
                }

            }
        }

        private string NextToken()
        {
            if (inputPosition < input.Length)
            {
                return input[inputPosition++].ToString();
            }
            else
            {
                return null;
            }
        }

        private void ConsumeWhitespace()
        {
            while (inputPosition < input.Length && char.IsWhiteSpace(input[inputPosition]))
            {
                inputPosition++;
            }
        }

        private bool IsEndOfInput() => inputPosition >= input.Length;

        private readonly string input;
        private int inputPosition = 0;

        public SyntaxTreeLexer(string input)
        {
            this.input = input ?? throw new ArgumentNullException(nameof(input));
        }

        // Define tokens for the lexer
        public enum TokenType
        {
            Identifier,
            Keyword,
            Number,
            StringLiteral,
            Operator,
            Punctuation,
            Newline,
            Indent,
            Dedent,
            EndMarker,
            Invalid
        }

        public readonly record TupleToken(TokenType tokenType, string Value);
        public readonly record TokenTuple(TokenType tokenType, int Position);

To create a .NET 9.0 solution for generating an Abstract Syntax Tree (AST) Lexer and Pretty Printer in C#, we need to follow the steps outlined in the prompt. Below is a detailed plan and the initial code structure for the solution.

### Solution Steps

1. **Initialize a new Solution in Visual Studio**:
   - Create a new .NET 9.0 Class Library project.
   - Add separate files for each class, interface, enumeration, and record as specified.

2. **Define the Project Structure:**
   - Ensure each lexer-related component is in its own file.
   - Implement the necessary classes and interfaces to handle the grammar rules.

3. **Implement the Lexer:**
   - Create a `Lexer` class that can tokenize the input based on the given grammar.

4. **Generate Abstract Syntax Tree (AST):**
   - Implement classes for each node type in the AST.
   - Create a parser that constructs an AST from the tokens generated by the lexer.

5. **Pretty Printer:**
   - Implement a pretty printer to convert the AST back into a readable Python code format.

6. **Unit Tests:**
    - Write unit tests for the lexing and parsing process, ensuring all bounding conditions are tested thoroughly.
    - Ensure there are sufficient unit tests covering various scenarios of the grammar.

### Solution Steps

1. **Initialize a new Solution in Visual Studio:**
   - Create a new .NET 9.0 Class Library project named `LexerLibrary`.
   - Add necessary files for classes, interfaces, enums, and records as per the defined structure.

Here is the complete solution with all requirements:

### File System Structure